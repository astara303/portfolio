{"version":3,"sources":["data.js","components/TimelineItem.js","components/Timeline.js","components/Slideshow.js","App.js","serviceWorker.js","index.js"],"names":["timelineData","text","learned","created","date","image","category","tag","link","url","TimelineItem","data","className","href","target","rel","Timeline","length","map","idx","key","slideImages","properties","duration","transitionDuration","infinite","indicators","arrows","pauseOnHover","Slideshow","style","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b76a4f1.chunk.js","sourcesContent":["const timelineData = [\n  {\n    text: 'A full-stack website that tells a story about interviewing for a position as a developer. Sign up and see if you pass the interview!',\n    learned: 'During this project I learned a lot about data models, tables, and relationships between models built with SQL. I reinforced my previous React experience by rendering and routing components for a text-based choice game with multiple endings, and a hidden score to determine that ending.',\n    created: 'Created with React.js, Django, Python and PostgreSQL.',\n    date: 'March 03 2020',\n    image: 'https://i.ibb.co/jWy8HLz/interviewscreenshot.png',\n    category: {\n      tag: 'Let\\'s Interview!',\n    },\n    link: {\n      url: 'https://lets-interview.herokuapp.com/',\n      text: 'Check out Let\\'s Interview! here'\n    }\n  },\n  {\n    text: 'A full-stack social website for scavenger-hunting. Sign up, search for trails you like, save them to your profile, or create your own.',\n    learned: 'While creating Geocachr I built a strong connection to Express. I love it! I found I really enjoyed coding the back end and testing. I had a lot of fun creating the trail seeds for our Mongo database as well. It was rewarding to code the virtual schemas and then display that information on the user profile.',\n    created: 'Created with React.js, Express.js, Node.js and MongoDB.',\n    date: 'February 14 2020',\n    image: 'https://i.ibb.co/zb7NgkM/geocachr.png',\n    category: {\n      tag: 'Geocachr',\n    },\n    link: {\n      url: 'https://geocachr.herokuapp.com/',\n      text: 'Check out Geocachr here'\n    }\n  },\n  {\n    text: 'A front-end quiz website that utilizes three public APIs. Are you nerdy enough to ace the quiz on hard difficulty?',\n    learned: 'Built in just two days, this was a test of my front-end knowledge so far. Creating the logic for the game was a fun challenge because I had to use the public API documentation in order to render the data properly. It is built with the Bulma CSS framework.',\n    created: 'Created with React.js.',\n    date: 'January 24 2020',\n    image: 'https://i.ibb.co/kgKPDH8/TodoQuiz.png',\n    category: {\n      tag: '//TODO:Quiz',\n    },\n    link: {\n      url: 'https://todo-quiz-app.herokuapp.com/',\n      text: 'Check out TODO:Quiz here'\n    }\n  },\n  {\n    text: 'A front-end browser-based Battleship game. Place your ships on your map and fire at your enemy using the radar!',\n    learned: 'The most challenging aspect of programming this game was automating the computer player. There is a targeted fire function that runs whenever the computer detects a HIT on a ship. I am proud of this result but in the future I would make this function more thorough.',\n    created: 'Created in vanillia JavaScript using DOM manipulation.',\n    date: 'January 10 2020',\n    image: 'https://i.ibb.co/Z1rKBxv/Screenshot-2020-03-25-at-17-17-31.png',\n    category: {\n      tag: 'Battleship',\n    },\n    link: {\n      url: 'https://astara303.github.io/sei-project-1/',\n      text: 'Check out Battleship here'\n    }\n  }\n]\n\nexport default timelineData","import React from 'react'\n\nconst TimelineItem = ({ data }) => (\n  <div className=\"timeline-item\">\n    <div className=\"timeline-item-content\">\n      <span className=\"tag\">\n        {data.category.tag}\n      </span>\n      <p className=\"intro\">{data.text}</p>\n      <p className=\"learned\">{data.learned}</p>\n      <p className=\"created\">{data.created}</p>\n      <div className=\"textlink\">\n      <a href={data.link.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        {data.link.text}\n      </a>\n      </div>\n      <span className=\"circle\"></span>\n    </div>\n  </div>\n)\n\nexport default TimelineItem","import React from 'react'\nimport timelineData from '../data'\nimport TimelineItem from './TimelineItem'\n\nconst Timeline = () => timelineData.length > 0 && (\n  <div className=\"timeline-container\">\n    {timelineData.map((data, idx) => (\n      <TimelineItem data={data} key={idx} />\n    ))}\n  </div>\n)\n\nexport default Timeline","import React from 'react'\nimport { Slide } from 'react-slideshow-image'\n\nconst slideImages = [\n  'https://i.ibb.co/s372k5T/slideshow1.png',\n  'https://i.ibb.co/1zmbbjq/slideshow2.png',\n  'https://i.ibb.co/jVth02C/slideshow3.png',\n  'https://i.ibb.co/JcF8rft/slideshow4.png'\n]\n\nconst properties = {\n  duration: 5000,\n  transitionDuration: 500,\n  infinite: true,\n  indicators: true,\n  arrows: true,\n  pauseOnHover: true,\n  // onChange: (oldIndex, newIndex) => {\n  //   console.log(`slide transition from ${oldIndex} to ${newIndex}`);\n  // }\n}\n\nconst Slideshow = () => {\n    return (\n      <div className=\"slide-container\">\n        <Slide {...properties}>\n          <div className=\"each-slide\">\n            <div style={{'backgroundImage': `url(${slideImages[0]})`}}>\n            </div>\n          </div>\n          <div className=\"each-slide\">\n            <div style={{'backgroundImage': `url(${slideImages[1]})`}}>\n            </div>\n          </div>\n          <div className=\"each-slide\">\n            <div style={{'backgroundImage': `url(${slideImages[2]})`}}>\n            </div>\n          </div>\n          <div className=\"each-slide\">\n            <div style={{'backgroundImage': `url(${slideImages[3]})`}}>\n            </div>\n          </div>\n        </Slide>\n      </div>\n    )\n}\n\nexport default Slideshow","import React from 'react'\n\nimport Timeline from './components/Timeline'\nimport Slideshow from './components/Slideshow'\nimport './App.css'\n\nconst App = () => (\n    <>\n      <h1 className=\"animated fadeInDown\">Astara Cambata</h1>\n      <h2>Web Developer</h2>\n      <div>\n        <p><span><a href=\"https://github.com/astara303\" className=\"link\">GitHub</a></span> | <span><a href=\"https://linkedin.com/in/astara-cambata/\" className=\"link\">Linkedin</a></span> | astaracambata@gmail.com</p>\n      </div>\n      <div className=\"blurbBox\">\n      <div className=\"blurb\">\n        <p>I believe in the power of programming. Great code makes people’s lives easier, and can be so much fun for the user. My background in creative and research roles informs the problem-solving and project-management skills I bring to every project.</p>\n        <p>My experience at General Assembly was the ultimate crash course in channelling creativity and passion into strict deadlines and learning quickly. The greatest lesson I’ve taken away from the Software Enginerring Immersive is that I can be excited about what I don’t know rather than being afraid of it. I am hyper-focused on delivering on this skill to my future employer. Let’s have a chat!</p>\n      </div>\n      </div>\n      <div>\n        <h3>Skills</h3>\n        <div className=\"iconBox\">\n          <div className=\"icons\">\n            <i class=\"devicon-javascript-plain\"></i>\n            <i class=\"devicon-html5-plain-wordmark\"></i>\n            <i class=\"devicon-react-original-wordmark\"></i>\n            <i class=\"devicon-jquery-plain-wordmark\"></i>\n            <i class=\"devicon-express-original-wordmark colored\"></i>\n            <i class=\"devicon-nodejs-plain-wordmark\"></i>\n            <i class=\"devicon-css3-plain-wordmark\"></i>\n            <i class=\"devicon-sass-original\"></i>\n            <i class=\"devicon-bootstrap-plain-wordmark\"></i>\n            <i class=\"devicon-python-plain-wordmark\"></i>\n            <i class=\"devicon-django-line-wordmark\"></i>\n            <i class=\"devicon-postgresql-plain-wordmark\"></i>\n            <i class=\"devicon-heroku-original-wordmark\"></i>\n            <i class=\"devicon-mocha-plain\"></i>\n            <i class=\"devicon-github-plain-wordmark colored\"></i>\n          </div>\n        </div>\n      </div>\n      <div>\n        <h3>Project Timeline</h3>\n        <Slideshow />\n        <Timeline />\n      </div>\n      </>\n  )\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}